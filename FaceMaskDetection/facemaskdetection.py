# -*- coding: utf-8 -*-
"""FaceMaskDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lDfb32EUzTnnK_57UtD5l3Q_tEF3ITpg
"""

# Commented out IPython magic to ensure Python compatibility.

"""
import all required libraries 
"""
import cv2
import matplotlib.pyplot as plt
import numpy as np
import glob
import os

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, MaxPooling2D, Activation, Dropout,Flatten,Conv2D
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow import keras
from PIL import Image
import os
import pandas as pd


"""
  store path for all train, validation and test data  
"""
train_real_face_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/RFMD/train/'
validation_real_face_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/RFMD/validation/'
test_real_face_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/RFMD/test/'

train_real_simulated_combined_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/combined/train/'
validation_real_simulated_combined_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/combined/validation/'
test_real_simulated_combined_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/combined/test/'

train_simulated_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/SFMD/train/'
validation_simulated_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/SFMD/validation/'
test_simulated_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/SFMD/test/'

train_simulated_roi_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/ROI/SFMD/train/'
validation_simulated_roi_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/ROI/SFMD/validation/'
test_simulated_roi_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/ROI/SFMD/test/'


train_real_face_roi_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/ROI/RFMD/train/'
validation_real_face_roi_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/ROI/RFMD/validation/'
test_real_face_roi_image_directory='/content/drive/MyDrive/Colab Notebooks/Datasets/ROI/RFMD/test/'

train_real_roi_combined_directory='/content/drive/MyDrive/Colab Notebooks/RFMD/train/'
test_real_roi_combined_directory='/content/drive/MyDrive/Colab Notebooks/RFMD/test/'
validation_real_roi_combined_directory='/content/drive/MyDrive/Colab Notebooks/RFMD/validation/'

train_simulated_face_roi_combined_directory='/content/drive/MyDrive/Colab Notebooks/SFMD/train/'
test_simulated_face_roi_combined_directory='/content/drive/MyDrive/Colab Notebooks/SFMD/test/'
validation_simulated_face_roi_combined_directory='/content/drive/MyDrive/Colab Notebooks/SFMD/validation/'

train_all_combined_directory='/content/drive/MyDrive/Colab Notebooks/all/train/'
test_all_combined_directory='/content/drive/MyDrive/Colab Notebooks/all/test/'
validation_all_combined_directory='/content/drive/MyDrive/Colab Notebooks/all/validation/'

train_real_simulated_roi_image_directory='content/drive/MyDrive/Colab Notebooks/ROI/real_simuluated/train/'
validation_real_simulated_roi_image_directory='content/drive/MyDrive/Colab Notebooks/ROI/real_simuluated/validation/'
test_real_simulated_roi_image_directory='content/drive/MyDrive/Colab Notebooks/ROI/real_simuluated/test/'



"""
  image generator method returns newly classified image after rescaling
"""
def image_genarator():
  image_gen=ImageDataGenerator(
      zoom_range=0.2,
      shear_range=0.2,
      rescale=1/255,
      horizontal_flip=False
  )
  return image_gen

"""
  fixed input shape for model 
"""
input_shape = (150,150,3)

"""
 this method prepare our model and return
"""
def prepare_model():
  model = Sequential()

  model.add(Conv2D(filters=32, kernel_size=(3,3),input_shape=input_shape, activation='relu',))
  model.add(MaxPooling2D(pool_size=(2, 2)))

  model.add(Conv2D(filters=32, kernel_size=(3,3),input_shape=input_shape, activation='relu',))
  model.add(MaxPooling2D(pool_size=(2, 2)))

  model.add(Conv2D(filters=64, kernel_size=(3,3),input_shape=input_shape, activation='relu',))
  model.add(MaxPooling2D(pool_size=(2, 2)))

  model.add(Flatten())

  model.add(Dense(64))
  model.add(Activation('relu'))

  model.add(Dropout(0.5))

  model.add(Dense(1))
  model.add(Activation('sigmoid'))

  model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
  return model


"""
 create model object
"""
real_face_model=prepare_model()

"""
 observe the model summary
"""
real_face_model.summary()

"""
 create image generator object
"""
image_generator=image_genarator()


"""
 this method take image directory as argument and prepare image generator and return
"""
def prepare_images(imageDirectory):
  batch_size=16
  images_genarator=image_generator.flow_from_directory(imageDirectory,target_size=input_shape[:2],batch_size=batch_size,class_mode='binary')
  return images_genarator


"""
 prepare all train, validation and test image generator for real human face with mask and without mask
"""
train_real_face_image_generator=prepare_images(train_real_face_image_directory)
validation_real_face_image_generator=prepare_images(validation_real_face_image_directory)
test_real_face_image_generator=prepare_images(test_real_face_image_directory)


"""
 fit the model with train data and validation data
"""
real_face_model_results= real_face_model.fit(train_real_face_image_generator,epochs=6,steps_per_epoch=200,validation_data=validation_real_face_image_generator,validation_steps=20)

"""
 save the model
"""
real_face_model.save('/content/drive/MyDrive/Colab Notebooks/MaskDetectionData/final_model/real_face_model.h5')

"""
 evaluate the model performance with test data
"""
real_face_evaluation=real_face_model.evaluate(test_real_face_image_generator,batch_size=2,verbose=1)


"""
 prepare all train, validation and test image generator for simulated human face with mask and without mask
"""
train_simulated_image_generator=prepare_images(train_simulated_image_directory)
validation_simulated_image_generator=prepare_images(validation_simulated_image_directory)
test_simulated_image_generator=prepare_images(test_simulated_image_directory)

"""
 create simulated model object and fit the model with train and valudation data
"""
simulated_face_model=prepare_model()
simulated_results= simulated_face_model.fit(train_simulated_image_generator,epochs=6,steps_per_epoch=91,validation_data=validation_simulated_image_generator,validation_steps=20)

"""
 evaluated the simulated model and save it
"""
simulated_evaluation=simulated_face_model.evaluate(test_simulated_image_generator,batch_size=2,verbose=1)
simulated_face_model.save('/content/drive/MyDrive/Colab Notebooks/MaskDetectionData/final_model/simulated_face_model.h5')

"""
 prepare all train, validation and test image generator for real and simulated
 human face with mask and without mask
"""
train_real_simulated_combined_image_generator=prepare_images(train_real_simulated_combined_image_directory)
validation_real_simulated_combined_image_generator=prepare_images(validation_real_simulated_combined_image_directory)
test_image_real_simulated_combined_generator=prepare_images(test_real_simulated_combined_image_directory)

"""
cread combined of real and simulated model and fit the model
"""
combined_real_simulated_face_model=prepare_model()
combined_real_simulated_face_results= combined_real_simulated_face_model.fit(train_real_simulated_combined_image_generator,epochs=6,steps_per_epoch=200,validation_data=validation_real_simulated_combined_image_generator,validation_steps=20)

"""
evaluated the combined model and save it
"""
combined_real_simulated_face_evaluation=combined_real_simulated_face_model.evaluate(test_image_real_simulated_combined_generator,batch_size=2,verbose=1)
combined_real_simulated_face_model.save('/content/drive/MyDrive/Colab Notebooks/MaskDetectionData/final_model/combined_real_simulated_face_model.h5')

"""
 prepare all train, validation and test image generator for only simulated
  face which is detected from simulated image  with mask and without mask
"""
train_simulated_roi_image_generator=prepare_images(train_simulated_roi_image_directory)
validation_simulated_roi_image_generator=prepare_images(validation_simulated_roi_image_directory)
test_simulated_roi_image_generator=prepare_images(test_simulated_roi_image_directory)

"""
 create model and fit the model for the data
"""
simulated_roi_model=prepare_model()
simulated_roi_result=simulated_roi_model.fit(train_simulated_roi_image_generator,epochs=6,steps_per_epoch=65,validation_data=validation_simulated_roi_image_generator,validation_steps=20)

"""
 evaluate the  model and save it
"""
simulated_roi_evaulation=simulated_roi_model.evaluate(test_simulated_roi_image_generator,batch_size=2,verbose=1)
simulated_roi_model.save('/content/drive/MyDrive/Colab Notebooks/MaskDetectionData/final_model/simulated_roi_model.h5')


"""
 prepare all train, validation and test image generator for only 
  face which is detected from real human image  with mask and without mask
"""
train_real_face_roi_image_generator=prepare_images(train_real_face_roi_image_directory)
validation_real_face_roi_image_generator=prepare_images(validation_real_face_roi_image_directory)
test_real_face_roi_image_generator=prepare_images(test_real_face_roi_image_directory)

"""
 create model and fit the model for the data
"""
real_face_roi_model = prepare_model()
real_face_roi_result= real_face_roi_model.fit(train_real_face_roi_image_generator,epochs=6,steps_per_epoch=200,validation_data=validation_real_face_roi_image_generator,validation_steps=20)

"""
 evaluate the  model and save it
"""
real_face_roi_evaulation=real_face_roi_model.evaluate(test_real_face_roi_image_generator,batch_size=2,verbose=1)
real_face_roi_model.save('/content/drive/MyDrive/Colab Notebooks/MaskDetectionData/final_model/real_face_roi_model.h5')


"""
 prepare all train, validation and test image generator for both real image and only  
  face which is detected from real human image  with mask and without mask
"""
train_real_face_roi_combined_image_generator=prepare_images(train_real_roi_combined_directory)
validation_real_face_roi__combined_image_generator=prepare_images(validation_real_roi_combined_directory)
test_real_face_roi_combined_image_generator=prepare_images(test_real_roi_combined_directory)

"""
 create model and fit the model for the data
"""
real_face_roi_combined_model = prepare_model()
real_face_roi_combined_result= real_face_roi_combined_model.fit(train_real_face_roi_combined_image_generator,epochs=6,steps_per_epoch=200,validation_data=validation_real_face_roi__combined_image_generator,validation_steps=20)

"""
 evaluate the  model and save it
"""
real_face_roi_combined_evaulation=real_face_roi_combined_model.evaluate(test_real_face_roi_combined_image_generator,batch_size=2,verbose=1)
real_face_roi_combined_model.save('/content/drive/MyDrive/Colab Notebooks/MaskDetectionData/final_model/real_face_roi_combined_model.h5')

"""
 prepare all train, validation and test image generator for both simulated image and only  
  face which is detected from simulated  image  with mask and without mask
"""
train_simulated_face_roi_combined_image_generator=prepare_images(train_simulated_face_roi_combined_directory)
validation_simulated_face_roi_combined_image_generator=prepare_images(validation_simulated_face_roi_combined_directory)
test_simulated_face_roi_combined_image_generator=prepare_images(test_simulated_face_roi_combined_directory)
"""
 create model and fit the model for the data
"""
simulated_face_roi_combined_model = prepare_model()
simulated_face_roi_combined_result= simulated_face_roi_combined_model.fit(train_simulated_face_roi_combined_image_generator,epochs=6,steps_per_epoch=100,validation_data=validation_simulated_face_roi_combined_image_generator,validation_steps=20)

"""
 evaluate the  model and save it
"""
simulated_face_roi_combined_evaulation=simulated_face_roi_combined_model.evaluate(test_simulated_face_roi_combined_image_generator,batch_size=2,verbose=1)
simulated_face_roi_combined_model.save('/content/drive/MyDrive/Colab Notebooks/MaskDetectionData/final_model/simulated_face_roi_combined_model.h5')


"""
 prepare all train, validation and test image generator for both only face  simulated image and only  
  face of real image  with mask and without mask
"""
train_real_simulated_roi_image_generator=prepare_images(train_real_simulated_roi_image_directory)
validation_real_simulated_roi_image_generator=prepare_images(validation_real_simulated_roi_image_directory)
test_real_simulated_roi_image_generator=prepare_images(test_real_simulated_roi_image_directory)

"""
 create model and fit the model for the data
"""
combined_real_simulated_roi_model=prepare_model()
combined_real_simulated_roi_model_result= combined_real_simulated_roi_model.fit(train_real_simulated_roi_image_generator,epochs=6,steps_per_epoch=200,validation_data=validation_real_simulated_roi_image_generator,validation_steps=20)

"""
 evaluate the  model and save it
"""
combined_real_simulated_roi_model_evaulation=combined_real_simulated_roi_model.evaluate(test_real_simulated_roi_image_generator,batch_size=2,verbose=1)
combined_real_simulated_roi_model.save('model/combined_real_simulated_roi_model.h5')


"""
 prepare all train, validation and test image generator for all real , real face, simulated and simulated
  with mask and without mask
"""
train_all_combined_image_generator=prepare_images(train_all_combined_directory)
validation_all_combined_image_generator=prepare_images(validation_all_combined_directory)
test_all_combined_image_generator=prepare_images(test_all_combined_directory)

"""
 create model and fit the model for the data
"""
all_combined_model = prepare_model()
all_combined_result= all_combined_model.fit(train_all_combined_image_generator,epochs=6,steps_per_epoch=200,validation_data=validation_all_combined_image_generator,validation_steps=20)

"""
 evaluate the  model and save it
"""
all_combined_evaulation=all_combined_model.evaluate(test_all_combined_image_generator,batch_size=2,verbose=1)
all_combined_model.save('/content/drive/MyDrive/Colab Notebooks/MaskDetectionData/final_model/all_combined_model.h5')

